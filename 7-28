#!/bin/bash

set -euo pipefail

# === Your Provided Inputs ===
VM_NAME="test-gpu-vm"
PORT_NAME="tn02-${VM_NAME}-port"
NETWORK_ID="3eb39e89-ac62-4b5b-a313-8d52482cc1f2"
SUBNET_ID="e5db0db9-bf93-43f4-928a-e46e099fef9e"
FLOATING_SUBNET_ID="e33be8b2-02e2-41a5-87b5-830ba5d0db7a"
FLAVOR="r8g.xlarge"
IMAGE_ID="07ba4847-245e-401c-aff0-65a4124ceef2"
SNAPSHOT_ID="e355ab4b-a2f5-4a25-a0c8-2523816c9678"
KEY_NAME="c30-drm-keypair"
SECURITY_GROUPS=(
  "b3455868-8842-4b16-9f35-684e25f25f28"
  "1320ddfd-e090-4300-8d9c-c0d10dfaf84b"
  "c741134d-43d3-4419-bb55-ba6e60bead75"
  "58269c3b-bd2d-4287-aedc-2e2f2c744c19"
)

echo "===== ðŸš€ Creating VM: $VM_NAME ====="

# === Step 1: Create Port ===
PORT_ID=$(openstack port create \
  --network "$NETWORK_ID" \
  --fixed-ip subnet="$SUBNET_ID" \
  --enable "$PORT_NAME" -f json | jq -r '.id')

echo "[+] Created port: $PORT_ID"

# === Step 2: Attach Security Groups ===
for sg in "${SECURITY_GROUPS[@]}"; do
  openstack port set --security-group "$sg" "$PORT_ID"
done

# === Step 3: Create and Attach Floating IP ===
FLOATING_IP_ID=$(openstack floating ip create \
  --subnet "$FLOATING_SUBNET_ID" \
  --port "$PORT_ID" -f json | jq -r '.id')

echo "[+] Created and associated floating IP: $FLOATING_IP_ID"

# === Step 4: Create Bootable Volume from Snapshot ===
VOLUME_ID=$(openstack volume create -f json \
  --snapshot "$SNAPSHOT_ID" \
  --size 125 \
  --bootable "${VM_NAME}-vol" | jq -r '.id')

echo "[+] Created volume: $VOLUME_ID"

# === Step 5: Wait for Volume to Be Ready ===
while true; do
  STATUS=$(openstack volume show "$VOLUME_ID" -f value -c status)
  if [[ "$STATUS" == "available" ]]; then
    break
  fi
  echo "[~] Waiting for volume to become available... status: $STATUS"
  sleep 5
done

# === Step 6: Create the Server ===
echo "[*] Creating server: $VM_NAME"

openstack server create \
  --flavor "$FLAVOR" \
  --volume "$VOLUME_ID" \
  --port "$PORT_ID" \
  --key-name "$KEY_NAME" \
  --wait "$VM_NAME"

echo "âœ… VM '$VM_NAME' created successfully with floating IP: $FLOATING_IP_ID"
