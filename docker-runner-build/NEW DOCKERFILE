FROM ubuntu:latest

# Required environment setup and system tools
RUN apt-get update && \
    apt-get install -y \
    curl \
    gnupg \
    ca-certificates \
    sudo \
    git \
    unzip \
    jq \
    python3 \
    python3-pip \
    python3-dev \
    openssh-client \
    lsb-release \
    netcat-traditional \
    netcat-openbsd \
    libicu-dev \
    software-properties-common && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js 16+ (for React and Express)
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \
    apt-get update && \
    apt-get install -y nodejs

# Set working directory
WORKDIR /gh-runner
RUN mkdir -p bin

# GitHub Runner version
ARG GITHUB_RUNNER_VERSION="2.310.2"

# Install GitHub Actions self-hosted runner
RUN curl -o actions-runner-linux-x64-${GITHUB_RUNNER_VERSION}.tar.gz -Ls \
    https://github.com/actions/runner/releases/download/v${GITHUB_RUNNER_VERSION}/actions-runner-linux-x64-${GITHUB_RUNNER_VERSION}.tar.gz && \
    tar xzf actions-runner-linux-x64-${GITHUB_RUNNER_VERSION}.tar.gz

# Install Docker CLI
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
    gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce-cli

# Install JFrog CLI
RUN curl -fL https://getcli.jfrog.io | sh && \
    mv jfrog /usr/local/bin/

# Optional: Install kubectl and helm (for k8s deployment if needed)
RUN curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    chmod +x kubectl && mv kubectl /gh-runner/bin

RUN curl -Lo helm.tar.gz https://get.helm.sh/helm-v3.9.3-linux-amd64.tar.gz && \
    tar -xvf helm.tar.gz && mv linux-amd64/helm /gh-runner/bin && \
    rm -rf linux-amd64 helm.tar.gz

# Optional: Python-based utils (for future scripting or monitoring)
RUN pip3 install Jinja2

# Copy runner scripts
COPY entrypoint.sh .
COPY exitpoint.sh .
RUN chmod +x entrypoint.sh exitpoint.sh

# Set PATH to include custom bin
ENV PATH="$PATH:/gh-runner/bin"

# Create non-root user for security
RUN adduser ghrunner -uid 1001 && \
    chown -R ghrunner:ghrunner /gh-runner && \
    chmod 777 /gh-runner /home/ghrunner && \
    mkdir -p /ghrunner && chmod 777 /ghrunner

USER ghrunner

# Optional: Copy CLI config for terraform, JFrog, etc.
COPY cadence.tfrc /home/ghrunner/

# Expose frontend and backend ports (React + Express)
EXPOSE 3000
EXPOSE 3001

ENTRYPOINT ["/gh-runner/entrypoint.sh"]
